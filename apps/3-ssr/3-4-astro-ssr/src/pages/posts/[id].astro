---
import Layout from "../../layouts/Layout.astro";
import { type IComment, type IPost, type IUser } from "../../api-types";

export async function getStaticPaths() {
  const response = await fetch(`http://localhost:3300/posts`);
  const posts = (await response.json()) as IPost[];

  return posts.map((post) => ({
    params: { id: post.id.toString() },
  }));
}

const { id: postId } = Astro.params;

let post: IPost;
let comments: IComment[];
let user: IUser;

try {
  const [postResponse, commentsResponse] = await Promise.all([
    fetch(`http://localhost:3300/posts/${postId}`),
    fetch(`http://localhost:3300/posts/${postId}/comments`),
  ]);

  [post, comments] = (await Promise.all([
    postResponse.json(),
    commentsResponse.json(),
  ])) as [IPost, IComment[]];

  const userResponse = await fetch(
    `http://localhost:3300/users/${post.userId}`
  );
  user = (await userResponse.json()) as IUser;
} catch (error) {
  console.error(error);
  return Astro.redirect("/error");
}
---

<Layout title={`Post ${postId}`}>
  <div class="space-y-6">
    <div>
      <h1 class="text-3xl font-bold mb-2">Post: {post.id}</h1>
      <h2 class="text-2xl font-bold mb-2">{post.title}</h2>
      <h3 class="text-xl font-bold mb-4">
        By: <a
          href={`/users/${user.id}`}
          class="text-blue-600 hover:text-blue-800 no-underline">{user.name}</a
        >
      </h3>
      <p class="my-6 text-gray-700">
        {post.body}. {post.body}. {post.body}. {post.body}. {post.body}.
      </p>
    </div>

    <div class="flex justify-between items-center">
      <h3 class="text-xl font-bold">Comments on this Post</h3>
      <form method="GET">
        <button
          type="submit"
          class="text-gray-600 hover:text-gray-800"
          title="Refresh Comments"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5"
            viewBox="0 0 24 24"
            stroke-width="2"
            stroke="currentColor"
            fill="none"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4"></path>
            <path d="M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4"></path>
          </svg>
        </button>
      </form>
    </div>

    <div class="space-y-6">
      {
        comments.map((comment) => (
          <div class="p-4 rounded-lg border border-gray-200 shadow-sm relative">
            {comment.email === "user@mailinator.com" && (
              <form
                class="absolute right-2 top-2 delete-comment-form"
                onsubmit="return false;"
                data-comment-id={comment.id}
              >
                <button
                  type="submit"
                  class="text-red-600 hover:text-red-800"
                  title="Delete comment"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5"
                    viewBox="0 0 24 24"
                    stroke-width="2"
                    stroke="currentColor"
                    fill="none"
                  >
                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <path d="M4 7l16 0" />
                    <path d="M10 11l0 6" />
                    <path d="M14 11l0 6" />
                    <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" />
                    <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" />
                  </svg>
                </button>
              </form>
            )}
            <h4 class="text-lg font-bold mb-1">{comment.name}</h4>
            <h5 class="text-md font-medium text-gray-600 mb-2">
              {comment.email}
            </h5>
            <p class="text-gray-700">{comment.body}</p>
          </div>
        ))
      }
    </div>

    <form id="comment-form" class="space-y-4" onsubmit="return false;">
      <div>
        <label for="comment" class="block text-sm font-medium text-gray-700"
          >Post a Comment</label
        >
        <textarea
          id="comment"
          name="body"
          rows="3"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required></textarea>
      </div>
      <button
        type="submit"
        class="inline-flex justify-center rounded-md border border-transparent bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        Post Comment
      </button>
    </form>
  </div>
</Layout>

<script is:inline define:vars={{ postId }}>
  const form = document.getElementById("comment-form");
  const textarea = document.getElementById("comment");

  form?.addEventListener("submit", async (e) => {
    e.preventDefault();

    const button = form.querySelector("button");
    if (button) {
      button.disabled = true;
    }

    try {
      const formData = new FormData();
      formData.append("body", textarea?.value || "");

      const response = await fetch(`/api/add-comment?postId=${postId}`, {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        throw new Error("Failed to post comment");
      }

      // Refresh the page to show the new comment
      window.location.reload();
    } catch (error) {
      console.error("Error posting comment:", error);
      alert("Failed to post comment. Please try again.");
    } finally {
      if (button) {
        button.disabled = false;
      }
    }
  });
</script>

<script define:vars={{ postId }}>
  document.querySelectorAll(".delete-comment-form").forEach((form) => {
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const button = form.querySelector("button");
      if (button) {
        button.disabled = true;
      }

      try {
        const commentId = form.getAttribute("data-comment-id");
        const formData = new FormData();
        formData.append("commentId", commentId);
        formData.append("postId", postId);

        const response = await fetch("/api/delete-comment", {
          method: "POST",
          body: formData,
        });

        if (!response.ok) {
          throw new Error("Failed to delete comment");
        }

        // Refresh the page to show the updated comments
        window.location.reload();
      } catch (error) {
        console.error("Error deleting comment:", error);
        alert("Failed to delete comment. Please try again.");
      } finally {
        if (button) {
          button.disabled = false;
        }
      }
    });
  });
</script>
